<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#+
    void CtorPreamble(string dimSuffix)
    {
#>
            if (array == null)
                ThrowHelper.ThrowArgumentNullException(ExceptionArgument.array);
            if (default(T) == null && array.GetType() != typeof(T[]))
                ThrowHelper.ThrowArrayTypeMismatchException_ArrayTypeMustBeExactMatch(typeof(T));

            _objectOrNull = array;
            _byteOffsetOrPointer = ViewHelper.PerTypeValues<T>.ArrayAdjustment<#= dimSuffix #>;
<#+
    }
#>
<#+
    void CtorSetLengths(int dims)
    {
        for (int dim = 0; dim < dims; ++dim)
        {
#>
            _length<#= dim #> = array.GetLength(<#= dim #>);
<#+
        }
    }
#>
<#+
    void CtorSetByteStrides(int dims)
    {
        for (int dim = 0; dim < (dims - 1); ++dim)
        {
            if (dim == 0)
            {
#>
            _byteStride<#= dims - dim - 2 #> = new IntPtr(_length<#= dims - dim - 1 #>).Multiply(Unsafe.SizeOf<T>());
<#+
            }
            else
            {
#>
            _byteStride<#= dims - dim - 2 #> = _byteStride<#= dims - dim - 1 #>.Multiply(_length<#= dims - dim - 1 #>);
<#+
            }
        }
    }
#>
<#+
    void CtorCheckStarts(int dims)
    {
        for (int dim = 0; dim < dims; ++dim)
        {
#>
            if ((uint)start<#= dim #> > (uint)_length<#= dim #>)
                ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.start<#= dim #>);
<#+
        }
    }
#>
<#+
    void CtorCheckStartsAndLengths(int dims)
    {
        for (int dim = 0; dim < dims; ++dim)
        {
#>
            if ((uint)start<#= dim #> > (uint)_length<#= dim #> || (uint)length<#= dim #> > (uint)(_length<#= dim #> - start<#= dim #>))
                ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.start<#= dim #>);
<#+
        }
    }
#>
<#+
    void CtorMoveByteOffset(int dims)
    {
#>
            _byteOffsetOrPointer = _byteOffsetOrPointer
<#+
        for (int dim = 0; dim < dims; ++dim)
        {
            if (dim < (dims - 1))
            {
#>
                .Add(_byteStride<#= dim #>.Multiply(start<#= dim #>))
<#+
            } else {
#>
                .Add<T>(start<#= dim #>);
<#+
            }
        }
    }
#>
<#+
    void CtorUpdateLengthsToParams(int dims)
    {
        for (int dim = 0; dim < dims; ++dim)
        {
#>
            _length<#= dim #> = length<#= dim #>;
<#+
        }
    }
#>
